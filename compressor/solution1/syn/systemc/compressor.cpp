// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "compressor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic compressor::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic compressor::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<20> compressor::ap_ST_fsm_state1 = "1";
const sc_lv<20> compressor::ap_ST_fsm_state2 = "10";
const sc_lv<20> compressor::ap_ST_fsm_state3 = "100";
const sc_lv<20> compressor::ap_ST_fsm_state4 = "1000";
const sc_lv<20> compressor::ap_ST_fsm_state5 = "10000";
const sc_lv<20> compressor::ap_ST_fsm_state6 = "100000";
const sc_lv<20> compressor::ap_ST_fsm_state7 = "1000000";
const sc_lv<20> compressor::ap_ST_fsm_state8 = "10000000";
const sc_lv<20> compressor::ap_ST_fsm_state9 = "100000000";
const sc_lv<20> compressor::ap_ST_fsm_state10 = "1000000000";
const sc_lv<20> compressor::ap_ST_fsm_state11 = "10000000000";
const sc_lv<20> compressor::ap_ST_fsm_state12 = "100000000000";
const sc_lv<20> compressor::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<20> compressor::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<20> compressor::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<20> compressor::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<20> compressor::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<20> compressor::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<20> compressor::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<20> compressor::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<1> compressor::ap_const_lv1_0 = "0";
const sc_lv<1> compressor::ap_const_lv1_1 = "1";
const sc_lv<2> compressor::ap_const_lv2_0 = "00";
const sc_lv<2> compressor::ap_const_lv2_2 = "10";
const sc_lv<2> compressor::ap_const_lv2_3 = "11";
const sc_lv<2> compressor::ap_const_lv2_1 = "1";
const sc_lv<32> compressor::ap_const_lv32_1 = "1";
const sc_lv<32> compressor::ap_const_lv32_12 = "10010";
const sc_lv<32> compressor::ap_const_lv32_13 = "10011";
const int compressor::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> compressor::ap_const_lv32_8 = "1000";
const sc_lv<32> compressor::ap_const_lv32_11 = "10001";
const sc_lv<32> compressor::ap_const_lv32_C = "1100";
const sc_lv<32> compressor::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> compressor::ap_const_lv32_2 = "10";
const sc_lv<32> compressor::ap_const_lv32_3 = "11";
const sc_lv<32> compressor::ap_const_lv32_4 = "100";
const sc_lv<32> compressor::ap_const_lv32_D = "1101";
const sc_lv<32> compressor::ap_const_lv32_9 = "1001";
const sc_lv<32> compressor::ap_const_lv32_17 = "10111";
const sc_lv<32> compressor::ap_const_lv32_1E = "11110";
const sc_lv<8> compressor::ap_const_lv8_FF = "11111111";
const sc_lv<23> compressor::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> compressor::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<5> compressor::ap_const_lv5_2 = "10";
const bool compressor::ap_const_boolean_1 = true;

compressor::compressor(sc_module_name name) : sc_module(name), mVcdFile(0) {
    compressor_CTRL_BUS_s_axi_U = new compressor_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("compressor_CTRL_BUS_s_axi_U");
    compressor_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    compressor_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    compressor_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    compressor_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    compressor_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    compressor_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    compressor_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    compressor_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    compressor_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    compressor_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    compressor_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    compressor_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    compressor_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    compressor_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    compressor_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    compressor_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    compressor_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    compressor_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    compressor_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    compressor_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    compressor_CTRL_BUS_s_axi_U->thresh(thresh);
    compressor_CTRL_BUS_s_axi_U->slope(slope);
    compressor_faddfsbkb_U1 = new compressor_faddfsbkb<1,5,32,32,32>("compressor_faddfsbkb_U1");
    compressor_faddfsbkb_U1->clk(ap_clk);
    compressor_faddfsbkb_U1->reset(ap_rst_n_inv);
    compressor_faddfsbkb_U1->din0(grp_fu_77_p0);
    compressor_faddfsbkb_U1->din1(thresh_read_reg_253);
    compressor_faddfsbkb_U1->opcode(grp_fu_77_opcode);
    compressor_faddfsbkb_U1->ce(ap_var_for_const0);
    compressor_faddfsbkb_U1->dout(grp_fu_77_p2);
    compressor_fmul_3cud_U2 = new compressor_fmul_3cud<1,4,32,32,32>("compressor_fmul_3cud_U2");
    compressor_fmul_3cud_U2->clk(ap_clk);
    compressor_fmul_3cud_U2->reset(ap_rst_n_inv);
    compressor_fmul_3cud_U2->din0(reg_93);
    compressor_fmul_3cud_U2->din1(slope_read_reg_248);
    compressor_fmul_3cud_U2->ce(ap_var_for_const0);
    compressor_fmul_3cud_U2->dout(grp_fu_81_p2);
    compressor_fcmp_3dEe_U3 = new compressor_fcmp_3dEe<1,1,32,32,1>("compressor_fcmp_3dEe_U3");
    compressor_fcmp_3dEe_U3->din0(tmp_reg_261);
    compressor_fcmp_3dEe_U3->din1(thresh_read_reg_253);
    compressor_fcmp_3dEe_U3->opcode(ap_var_for_const1);
    compressor_fcmp_3dEe_U3->dout(tmp_14_fu_85_p2);
    compressor_fcmp_3dEe_U4 = new compressor_fcmp_3dEe<1,1,32,32,1>("compressor_fcmp_3dEe_U4");
    compressor_fcmp_3dEe_U4->din0(tmp_19_fu_89_p0);
    compressor_fcmp_3dEe_U4->din1(thresh_read_reg_253);
    compressor_fcmp_3dEe_U4->opcode(ap_var_for_const1);
    compressor_fcmp_3dEe_U4->dout(tmp_19_fu_89_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_77_opcode);
    sensitive << ( tmp_15_reg_305 );
    sensitive << ( sel_tmp2_reg_310 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_77_p0);
    sensitive << ( tmp_15_reg_305 );
    sensitive << ( sel_tmp2_reg_310 );
    sensitive << ( reg_98 );
    sensitive << ( tmp_reg_261 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_in_V_0_ack_in);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_in_V_0_ack_out);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_V_0_data_out);
    sensitive << ( in_V_0_payload_A );
    sensitive << ( in_V_0_payload_B );
    sensitive << ( in_V_0_sel );

    SC_METHOD(thread_in_V_0_load_A);
    sensitive << ( in_V_0_sel_wr );
    sensitive << ( in_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_0_load_B);
    sensitive << ( in_V_0_sel_wr );
    sensitive << ( in_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_0_sel);
    sensitive << ( in_V_0_sel_rd );

    SC_METHOD(thread_in_V_0_state_cmp_full);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_in_V_0_vld_in);
    sensitive << ( in_V_TVALID );

    SC_METHOD(thread_in_V_0_vld_out);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_in_V_TDATA_blk_n);
    sensitive << ( in_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_V_TREADY);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_notlhs6_fu_172_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_fu_158_p4 );

    SC_METHOD(thread_notlhs8_fu_149_p2);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_16_fu_139_p4 );

    SC_METHOD(thread_notlhs_fu_121_p2);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_107_p4 );

    SC_METHOD(thread_notrhs7_fu_178_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_10_fu_168_p1 );

    SC_METHOD(thread_notrhs_fu_127_p2);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_117_p1 );

    SC_METHOD(thread_out_V_1_ack_in);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_ack_out);
    sensitive << ( out_V_TREADY );

    SC_METHOD(thread_out_V_1_data_out);
    sensitive << ( out_V_1_payload_A );
    sensitive << ( out_V_1_payload_B );
    sensitive << ( out_V_1_sel );

    SC_METHOD(thread_out_V_1_load_A);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_load_B);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_sel);
    sensitive << ( out_V_1_sel_rd );

    SC_METHOD(thread_out_V_1_state_cmp_full);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_vld_in);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_out_V_1_vld_out);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_TDATA);
    sensitive << ( out_V_1_data_out );

    SC_METHOD(thread_out_V_TDATA_blk_n);
    sensitive << ( out_V_1_state );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_out_V_TVALID);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_sel_tmp1_fu_222_p2);
    sensitive << ( tmp_15_fu_203_p2 );

    SC_METHOD(thread_sel_tmp2_fu_228_p2);
    sensitive << ( tmp_20_fu_217_p2 );
    sensitive << ( sel_tmp1_fu_222_p2 );

    SC_METHOD(thread_thresh_to_int_fu_155_p1);
    sensitive << ( thresh_read_reg_253 );

    SC_METHOD(thread_tmp_10_fu_168_p1);
    sensitive << ( thresh_to_int_fu_155_p1 );

    SC_METHOD(thread_tmp_11_fu_194_p2);
    sensitive << ( notlhs_reg_268 );
    sensitive << ( notrhs_reg_273 );

    SC_METHOD(thread_tmp_12_fu_184_p2);
    sensitive << ( notrhs7_fu_178_p2 );
    sensitive << ( notlhs6_fu_172_p2 );

    SC_METHOD(thread_tmp_13_fu_198_p2);
    sensitive << ( tmp_12_reg_289 );
    sensitive << ( tmp_11_fu_194_p2 );

    SC_METHOD(thread_tmp_15_fu_203_p2);
    sensitive << ( tmp_14_reg_295 );
    sensitive << ( tmp_13_fu_198_p2 );

    SC_METHOD(thread_tmp_16_fu_139_p4);
    sensitive << ( tmp_8_neg_fu_133_p2 );

    SC_METHOD(thread_tmp_17_fu_208_p2);
    sensitive << ( notrhs_reg_273 );
    sensitive << ( notlhs8_reg_284 );

    SC_METHOD(thread_tmp_18_fu_212_p2);
    sensitive << ( tmp_12_reg_289 );
    sensitive << ( tmp_17_fu_208_p2 );

    SC_METHOD(thread_tmp_19_fu_89_p0);
    sensitive << ( tmp_8_neg_reg_279 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_1_fu_117_p1);
    sensitive << ( tmp_1_to_int_fu_103_p1 );

    SC_METHOD(thread_tmp_1_to_int_fu_103_p1);
    sensitive << ( in_V_0_data_out );

    SC_METHOD(thread_tmp_20_fu_217_p2);
    sensitive << ( tmp_19_reg_300 );
    sensitive << ( tmp_18_fu_212_p2 );

    SC_METHOD(thread_tmp_21_fu_234_p3);
    sensitive << ( reg_93 );
    sensitive << ( tmp_15_reg_305 );
    sensitive << ( tmp_reg_261 );

    SC_METHOD(thread_tmp_22_fu_240_p3);
    sensitive << ( reg_93 );
    sensitive << ( sel_tmp2_reg_310 );
    sensitive << ( tmp_21_fu_234_p3 );

    SC_METHOD(thread_tmp_4_fu_107_p4);
    sensitive << ( tmp_1_to_int_fu_103_p1 );

    SC_METHOD(thread_tmp_8_neg_fu_133_p2);
    sensitive << ( tmp_1_to_int_fu_103_p1 );

    SC_METHOD(thread_tmp_9_fu_158_p4);
    sensitive << ( thresh_to_int_fu_155_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    in_V_0_sel_rd = SC_LOGIC_0;
    in_V_0_sel_wr = SC_LOGIC_0;
    in_V_0_state = "00";
    out_V_1_sel_rd = SC_LOGIC_0;
    out_V_1_sel_wr = SC_LOGIC_0;
    out_V_1_state = "00";
    ap_CS_fsm = "00000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "compressor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_V_TDATA, "(port)in_V_TDATA");
    sc_trace(mVcdFile, in_V_TVALID, "(port)in_V_TVALID");
    sc_trace(mVcdFile, in_V_TREADY, "(port)in_V_TREADY");
    sc_trace(mVcdFile, out_V_TDATA, "(port)out_V_TDATA");
    sc_trace(mVcdFile, out_V_TVALID, "(port)out_V_TVALID");
    sc_trace(mVcdFile, out_V_TREADY, "(port)out_V_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_V_0_data_out, "in_V_0_data_out");
    sc_trace(mVcdFile, in_V_0_vld_in, "in_V_0_vld_in");
    sc_trace(mVcdFile, in_V_0_vld_out, "in_V_0_vld_out");
    sc_trace(mVcdFile, in_V_0_ack_in, "in_V_0_ack_in");
    sc_trace(mVcdFile, in_V_0_ack_out, "in_V_0_ack_out");
    sc_trace(mVcdFile, in_V_0_payload_A, "in_V_0_payload_A");
    sc_trace(mVcdFile, in_V_0_payload_B, "in_V_0_payload_B");
    sc_trace(mVcdFile, in_V_0_sel_rd, "in_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_0_sel_wr, "in_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_0_sel, "in_V_0_sel");
    sc_trace(mVcdFile, in_V_0_load_A, "in_V_0_load_A");
    sc_trace(mVcdFile, in_V_0_load_B, "in_V_0_load_B");
    sc_trace(mVcdFile, in_V_0_state, "in_V_0_state");
    sc_trace(mVcdFile, in_V_0_state_cmp_full, "in_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_V_1_data_out, "out_V_1_data_out");
    sc_trace(mVcdFile, out_V_1_vld_in, "out_V_1_vld_in");
    sc_trace(mVcdFile, out_V_1_vld_out, "out_V_1_vld_out");
    sc_trace(mVcdFile, out_V_1_ack_in, "out_V_1_ack_in");
    sc_trace(mVcdFile, out_V_1_ack_out, "out_V_1_ack_out");
    sc_trace(mVcdFile, out_V_1_payload_A, "out_V_1_payload_A");
    sc_trace(mVcdFile, out_V_1_payload_B, "out_V_1_payload_B");
    sc_trace(mVcdFile, out_V_1_sel_rd, "out_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_1_sel_wr, "out_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_1_sel, "out_V_1_sel");
    sc_trace(mVcdFile, out_V_1_load_A, "out_V_1_load_A");
    sc_trace(mVcdFile, out_V_1_load_B, "out_V_1_load_B");
    sc_trace(mVcdFile, out_V_1_state, "out_V_1_state");
    sc_trace(mVcdFile, out_V_1_state_cmp_full, "out_V_1_state_cmp_full");
    sc_trace(mVcdFile, thresh, "thresh");
    sc_trace(mVcdFile, slope, "slope");
    sc_trace(mVcdFile, in_V_TDATA_blk_n, "in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, out_V_TDATA_blk_n, "out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, grp_fu_77_p2, "grp_fu_77_p2");
    sc_trace(mVcdFile, reg_93, "reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_15_reg_305, "tmp_15_reg_305");
    sc_trace(mVcdFile, sel_tmp2_reg_310, "sel_tmp2_reg_310");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, grp_fu_81_p2, "grp_fu_81_p2");
    sc_trace(mVcdFile, reg_98, "reg_98");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, slope_read_reg_248, "slope_read_reg_248");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, thresh_read_reg_253, "thresh_read_reg_253");
    sc_trace(mVcdFile, tmp_reg_261, "tmp_reg_261");
    sc_trace(mVcdFile, notlhs_fu_121_p2, "notlhs_fu_121_p2");
    sc_trace(mVcdFile, notlhs_reg_268, "notlhs_reg_268");
    sc_trace(mVcdFile, notrhs_fu_127_p2, "notrhs_fu_127_p2");
    sc_trace(mVcdFile, notrhs_reg_273, "notrhs_reg_273");
    sc_trace(mVcdFile, tmp_8_neg_fu_133_p2, "tmp_8_neg_fu_133_p2");
    sc_trace(mVcdFile, tmp_8_neg_reg_279, "tmp_8_neg_reg_279");
    sc_trace(mVcdFile, notlhs8_fu_149_p2, "notlhs8_fu_149_p2");
    sc_trace(mVcdFile, notlhs8_reg_284, "notlhs8_reg_284");
    sc_trace(mVcdFile, tmp_12_fu_184_p2, "tmp_12_fu_184_p2");
    sc_trace(mVcdFile, tmp_12_reg_289, "tmp_12_reg_289");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_14_fu_85_p2, "tmp_14_fu_85_p2");
    sc_trace(mVcdFile, tmp_14_reg_295, "tmp_14_reg_295");
    sc_trace(mVcdFile, tmp_19_fu_89_p2, "tmp_19_fu_89_p2");
    sc_trace(mVcdFile, tmp_19_reg_300, "tmp_19_reg_300");
    sc_trace(mVcdFile, tmp_15_fu_203_p2, "tmp_15_fu_203_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, sel_tmp2_fu_228_p2, "sel_tmp2_fu_228_p2");
    sc_trace(mVcdFile, tmp_22_fu_240_p3, "tmp_22_fu_240_p3");
    sc_trace(mVcdFile, grp_fu_77_p0, "grp_fu_77_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_19_fu_89_p0, "tmp_19_fu_89_p0");
    sc_trace(mVcdFile, tmp_1_to_int_fu_103_p1, "tmp_1_to_int_fu_103_p1");
    sc_trace(mVcdFile, tmp_4_fu_107_p4, "tmp_4_fu_107_p4");
    sc_trace(mVcdFile, tmp_1_fu_117_p1, "tmp_1_fu_117_p1");
    sc_trace(mVcdFile, tmp_16_fu_139_p4, "tmp_16_fu_139_p4");
    sc_trace(mVcdFile, thresh_to_int_fu_155_p1, "thresh_to_int_fu_155_p1");
    sc_trace(mVcdFile, tmp_9_fu_158_p4, "tmp_9_fu_158_p4");
    sc_trace(mVcdFile, tmp_10_fu_168_p1, "tmp_10_fu_168_p1");
    sc_trace(mVcdFile, notrhs7_fu_178_p2, "notrhs7_fu_178_p2");
    sc_trace(mVcdFile, notlhs6_fu_172_p2, "notlhs6_fu_172_p2");
    sc_trace(mVcdFile, tmp_11_fu_194_p2, "tmp_11_fu_194_p2");
    sc_trace(mVcdFile, tmp_13_fu_198_p2, "tmp_13_fu_198_p2");
    sc_trace(mVcdFile, tmp_17_fu_208_p2, "tmp_17_fu_208_p2");
    sc_trace(mVcdFile, tmp_18_fu_212_p2, "tmp_18_fu_212_p2");
    sc_trace(mVcdFile, tmp_20_fu_217_p2, "tmp_20_fu_217_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_222_p2, "sel_tmp1_fu_222_p2");
    sc_trace(mVcdFile, tmp_21_fu_234_p3, "tmp_21_fu_234_p3");
    sc_trace(mVcdFile, grp_fu_77_opcode, "grp_fu_77_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("compressor.hdltvin.dat");
    mHdltvoutHandle.open("compressor.hdltvout.dat");
}

compressor::~compressor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete compressor_CTRL_BUS_s_axi_U;
    delete compressor_faddfsbkb_U1;
    delete compressor_fmul_3cud_U2;
    delete compressor_fcmp_3dEe_U3;
    delete compressor_fcmp_3dEe_U4;
}

void compressor::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void compressor::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_2;
}

void compressor::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_out.read()))) {
            in_V_0_sel_rd =  (sc_logic) (~in_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_in.read()))) {
            in_V_0_sel_wr =  (sc_logic) (~in_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_2)))) {
            in_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_1)))) {
            in_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()))))) {
            in_V_0_state = ap_const_lv2_3;
        } else {
            in_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_out.read()))) {
            out_V_1_sel_rd =  (sc_logic) (~out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_in.read()))) {
            out_V_1_sel_wr =  (sc_logic) (~out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_1_state.read())))) {
            out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_1_state.read())))) {
            out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()))))) {
            out_V_1_state = ap_const_lv2_3;
        } else {
            out_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_load_A.read())) {
        in_V_0_payload_A = in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_load_B.read())) {
        in_V_0_payload_B = in_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1))) {
        notlhs8_reg_284 = notlhs8_fu_149_p2.read();
        notlhs_reg_268 = notlhs_fu_121_p2.read();
        notrhs_reg_273 = notrhs_fu_127_p2.read();
        tmp_8_neg_reg_279 = tmp_8_neg_fu_133_p2.read();
        tmp_reg_261 = in_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_A.read())) {
        out_V_1_payload_A = tmp_22_fu_240_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_B.read())) {
        out_V_1_payload_B = tmp_22_fu_240_p3.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_305.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_310.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_310.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_305.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_310.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_310.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())))) {
        reg_93 = grp_fu_77_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_305.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_310.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_310.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())))) {
        reg_98 = grp_fu_81_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sel_tmp2_reg_310 = sel_tmp2_fu_228_p2.read();
        tmp_15_reg_305 = tmp_15_fu_203_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        slope_read_reg_248 = slope.read();
        thresh_read_reg_253 = thresh.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_12_reg_289 = tmp_12_fu_184_p2.read();
        tmp_14_reg_295 = tmp_14_fu_85_p2.read();
        tmp_19_reg_300 = tmp_19_fu_89_p2.read();
    }
}

void compressor::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void compressor::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void compressor::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void compressor::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void compressor::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void compressor::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void compressor::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void compressor::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void compressor::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void compressor::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void compressor::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void compressor::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void compressor::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void compressor::thread_grp_fu_77_opcode() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_305.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_310.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_310.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        grp_fu_77_opcode = ap_const_lv2_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_310.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_305.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_310.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        grp_fu_77_opcode = ap_const_lv2_0;
    } else {
        grp_fu_77_opcode = "XX";
    }
}

void compressor::thread_grp_fu_77_p0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_305.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_310.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_310.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())))) {
        grp_fu_77_p0 = reg_98.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_305.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_310.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_310.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())))) {
        grp_fu_77_p0 = tmp_reg_261.read();
    } else {
        grp_fu_77_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void compressor::thread_in_V_0_ack_in() {
    in_V_0_ack_in = in_V_0_state.read()[1];
}

void compressor::thread_in_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1))) {
        in_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_0_ack_out = ap_const_logic_0;
    }
}

void compressor::thread_in_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_sel.read())) {
        in_V_0_data_out = in_V_0_payload_B.read();
    } else {
        in_V_0_data_out = in_V_0_payload_A.read();
    }
}

void compressor::thread_in_V_0_load_A() {
    in_V_0_load_A = (in_V_0_state_cmp_full.read() & ~in_V_0_sel_wr.read());
}

void compressor::thread_in_V_0_load_B() {
    in_V_0_load_B = (in_V_0_sel_wr.read() & in_V_0_state_cmp_full.read());
}

void compressor::thread_in_V_0_sel() {
    in_V_0_sel = in_V_0_sel_rd.read();
}

void compressor::thread_in_V_0_state_cmp_full() {
    in_V_0_state_cmp_full =  (sc_logic) ((!in_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_0_state.read() != ap_const_lv2_1))[0];
}

void compressor::thread_in_V_0_vld_in() {
    in_V_0_vld_in = in_V_TVALID.read();
}

void compressor::thread_in_V_0_vld_out() {
    in_V_0_vld_out = in_V_0_state.read()[0];
}

void compressor::thread_in_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_V_TDATA_blk_n = in_V_0_state.read()[0];
    } else {
        in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void compressor::thread_in_V_TREADY() {
    in_V_TREADY = in_V_0_state.read()[1];
}

void compressor::thread_notlhs6_fu_172_p2() {
    notlhs6_fu_172_p2 = (!tmp_9_fu_158_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_9_fu_158_p4.read() != ap_const_lv8_FF);
}

void compressor::thread_notlhs8_fu_149_p2() {
    notlhs8_fu_149_p2 = (!tmp_16_fu_139_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_16_fu_139_p4.read() != ap_const_lv8_FF);
}

void compressor::thread_notlhs_fu_121_p2() {
    notlhs_fu_121_p2 = (!tmp_4_fu_107_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_107_p4.read() != ap_const_lv8_FF);
}

void compressor::thread_notrhs7_fu_178_p2() {
    notrhs7_fu_178_p2 = (!tmp_10_fu_168_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_10_fu_168_p1.read() == ap_const_lv23_0);
}

void compressor::thread_notrhs_fu_127_p2() {
    notrhs_fu_127_p2 = (!tmp_1_fu_117_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_117_p1.read() == ap_const_lv23_0);
}

void compressor::thread_out_V_1_ack_in() {
    out_V_1_ack_in = out_V_1_state.read()[1];
}

void compressor::thread_out_V_1_ack_out() {
    out_V_1_ack_out = out_V_TREADY.read();
}

void compressor::thread_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_sel.read())) {
        out_V_1_data_out = out_V_1_payload_B.read();
    } else {
        out_V_1_data_out = out_V_1_payload_A.read();
    }
}

void compressor::thread_out_V_1_load_A() {
    out_V_1_load_A = (out_V_1_state_cmp_full.read() & ~out_V_1_sel_wr.read());
}

void compressor::thread_out_V_1_load_B() {
    out_V_1_load_B = (out_V_1_sel_wr.read() & out_V_1_state_cmp_full.read());
}

void compressor::thread_out_V_1_sel() {
    out_V_1_sel = out_V_1_sel_rd.read();
}

void compressor::thread_out_V_1_state_cmp_full() {
    out_V_1_state_cmp_full =  (sc_logic) ((!out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_1_state.read() != ap_const_lv2_1))[0];
}

void compressor::thread_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
        out_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_1_vld_in = ap_const_logic_0;
    }
}

void compressor::thread_out_V_1_vld_out() {
    out_V_1_vld_out = out_V_1_state.read()[0];
}

void compressor::thread_out_V_TDATA() {
    out_V_TDATA = out_V_1_data_out.read();
}

void compressor::thread_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        out_V_TDATA_blk_n = out_V_1_state.read()[1];
    } else {
        out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void compressor::thread_out_V_TVALID() {
    out_V_TVALID = out_V_1_state.read()[0];
}

void compressor::thread_sel_tmp1_fu_222_p2() {
    sel_tmp1_fu_222_p2 = (tmp_15_fu_203_p2.read() ^ ap_const_lv1_1);
}

void compressor::thread_sel_tmp2_fu_228_p2() {
    sel_tmp2_fu_228_p2 = (tmp_20_fu_217_p2.read() & sel_tmp1_fu_222_p2.read());
}

void compressor::thread_thresh_to_int_fu_155_p1() {
    thresh_to_int_fu_155_p1 = thresh_read_reg_253.read();
}

void compressor::thread_tmp_10_fu_168_p1() {
    tmp_10_fu_168_p1 = thresh_to_int_fu_155_p1.read().range(23-1, 0);
}

void compressor::thread_tmp_11_fu_194_p2() {
    tmp_11_fu_194_p2 = (notrhs_reg_273.read() | notlhs_reg_268.read());
}

void compressor::thread_tmp_12_fu_184_p2() {
    tmp_12_fu_184_p2 = (notrhs7_fu_178_p2.read() | notlhs6_fu_172_p2.read());
}

void compressor::thread_tmp_13_fu_198_p2() {
    tmp_13_fu_198_p2 = (tmp_11_fu_194_p2.read() & tmp_12_reg_289.read());
}

void compressor::thread_tmp_15_fu_203_p2() {
    tmp_15_fu_203_p2 = (tmp_13_fu_198_p2.read() & tmp_14_reg_295.read());
}

void compressor::thread_tmp_16_fu_139_p4() {
    tmp_16_fu_139_p4 = tmp_8_neg_fu_133_p2.read().range(30, 23);
}

void compressor::thread_tmp_17_fu_208_p2() {
    tmp_17_fu_208_p2 = (notrhs_reg_273.read() | notlhs8_reg_284.read());
}

void compressor::thread_tmp_18_fu_212_p2() {
    tmp_18_fu_212_p2 = (tmp_17_fu_208_p2.read() & tmp_12_reg_289.read());
}

void compressor::thread_tmp_19_fu_89_p0() {
    tmp_19_fu_89_p0 = tmp_8_neg_reg_279.read();
}

void compressor::thread_tmp_1_fu_117_p1() {
    tmp_1_fu_117_p1 = tmp_1_to_int_fu_103_p1.read().range(23-1, 0);
}

void compressor::thread_tmp_1_to_int_fu_103_p1() {
    tmp_1_to_int_fu_103_p1 = in_V_0_data_out.read();
}

void compressor::thread_tmp_20_fu_217_p2() {
    tmp_20_fu_217_p2 = (tmp_18_fu_212_p2.read() & tmp_19_reg_300.read());
}

void compressor::thread_tmp_21_fu_234_p3() {
    tmp_21_fu_234_p3 = (!tmp_15_reg_305.read()[0].is_01())? sc_lv<32>(): ((tmp_15_reg_305.read()[0].to_bool())? reg_93.read(): tmp_reg_261.read());
}

void compressor::thread_tmp_22_fu_240_p3() {
    tmp_22_fu_240_p3 = (!sel_tmp2_reg_310.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_reg_310.read()[0].to_bool())? reg_93.read(): tmp_21_fu_234_p3.read());
}

void compressor::thread_tmp_4_fu_107_p4() {
    tmp_4_fu_107_p4 = tmp_1_to_int_fu_103_p1.read().range(30, 23);
}

void compressor::thread_tmp_8_neg_fu_133_p2() {
    tmp_8_neg_fu_133_p2 = (tmp_1_to_int_fu_103_p1.read() ^ ap_const_lv32_80000000);
}

void compressor::thread_tmp_9_fu_158_p4() {
    tmp_9_fu_158_p4 = thresh_to_int_fu_155_p1.read().range(30, 23);
}

void compressor::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void compressor::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_TDATA\" :  \"" << in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_TVALID\" :  \"" << in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_V_TREADY\" :  \"" << in_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TDATA\" :  \"" << out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TVALID\" :  \"" << out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_TREADY\" :  \"" << out_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

