// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compressor,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=19,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=942,HLS_SYN_LUT=1723}" *)

module compressor (
        ap_clk,
        ap_rst_n,
        in_V_TDATA,
        in_V_TVALID,
        in_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_V_TDATA;
input   in_V_TVALID;
output   in_V_TREADY;
output  [31:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] in_V_0_data_out;
wire    in_V_0_vld_in;
wire    in_V_0_vld_out;
wire    in_V_0_ack_in;
reg    in_V_0_ack_out;
reg   [31:0] in_V_0_payload_A;
reg   [31:0] in_V_0_payload_B;
reg    in_V_0_sel_rd;
reg    in_V_0_sel_wr;
wire    in_V_0_sel;
wire    in_V_0_load_A;
wire    in_V_0_load_B;
reg   [1:0] in_V_0_state;
wire    in_V_0_state_cmp_full;
reg   [31:0] out_V_1_data_out;
reg    out_V_1_vld_in;
wire    out_V_1_vld_out;
wire    out_V_1_ack_in;
wire    out_V_1_ack_out;
reg   [31:0] out_V_1_payload_A;
reg   [31:0] out_V_1_payload_B;
reg    out_V_1_sel_rd;
reg    out_V_1_sel_wr;
wire    out_V_1_sel;
wire    out_V_1_load_A;
wire    out_V_1_load_B;
reg   [1:0] out_V_1_state;
wire    out_V_1_state_cmp_full;
wire   [31:0] thresh;
wire   [31:0] slope;
reg    in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_77_p2;
reg   [31:0] reg_93;
wire    ap_CS_fsm_state9;
reg   [0:0] tmp_15_reg_305;
reg   [0:0] sel_tmp2_reg_310;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_81_p2;
reg   [31:0] reg_98;
wire    ap_CS_fsm_state13;
reg   [31:0] slope_read_reg_248;
wire    ap_CS_fsm_state1;
reg   [31:0] thresh_read_reg_253;
reg   [31:0] tmp_reg_261;
wire   [0:0] notlhs_fu_121_p2;
reg   [0:0] notlhs_reg_268;
wire   [0:0] notrhs_fu_127_p2;
reg   [0:0] notrhs_reg_273;
wire   [31:0] tmp_8_neg_fu_133_p2;
reg   [31:0] tmp_8_neg_reg_279;
wire   [0:0] notlhs8_fu_149_p2;
reg   [0:0] notlhs8_reg_284;
wire   [0:0] tmp_12_fu_184_p2;
reg   [0:0] tmp_12_reg_289;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_14_fu_85_p2;
reg   [0:0] tmp_14_reg_295;
wire   [0:0] tmp_19_fu_89_p2;
reg   [0:0] tmp_19_reg_300;
wire   [0:0] tmp_15_fu_203_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] sel_tmp2_fu_228_p2;
wire   [31:0] tmp_22_fu_240_p3;
reg   [31:0] grp_fu_77_p0;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_19_fu_89_p0;
wire   [31:0] tmp_1_to_int_fu_103_p1;
wire   [7:0] tmp_4_fu_107_p4;
wire   [22:0] tmp_1_fu_117_p1;
wire   [7:0] tmp_16_fu_139_p4;
wire   [31:0] thresh_to_int_fu_155_p1;
wire   [7:0] tmp_9_fu_158_p4;
wire   [22:0] tmp_10_fu_168_p1;
wire   [0:0] notrhs7_fu_178_p2;
wire   [0:0] notlhs6_fu_172_p2;
wire   [0:0] tmp_11_fu_194_p2;
wire   [0:0] tmp_13_fu_198_p2;
wire   [0:0] tmp_17_fu_208_p2;
wire   [0:0] tmp_18_fu_212_p2;
wire   [0:0] tmp_20_fu_217_p2;
wire   [0:0] sel_tmp1_fu_222_p2;
wire   [31:0] tmp_21_fu_234_p3;
reg   [1:0] grp_fu_77_opcode;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in_V_0_sel_rd = 1'b0;
#0 in_V_0_sel_wr = 1'b0;
#0 in_V_0_state = 2'd0;
#0 out_V_1_sel_rd = 1'b0;
#0 out_V_1_sel_wr = 1'b0;
#0 out_V_1_state = 2'd0;
#0 ap_CS_fsm = 20'd1;
end

compressor_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
compressor_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .thresh(thresh),
    .slope(slope)
);

compressor_faddfsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
compressor_faddfsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_77_p0),
    .din1(thresh_read_reg_253),
    .opcode(grp_fu_77_opcode),
    .ce(1'b1),
    .dout(grp_fu_77_p2)
);

compressor_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
compressor_fmul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_93),
    .din1(slope_read_reg_248),
    .ce(1'b1),
    .dout(grp_fu_81_p2)
);

compressor_fcmp_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
compressor_fcmp_3dEe_U3(
    .din0(tmp_reg_261),
    .din1(thresh_read_reg_253),
    .opcode(5'd2),
    .dout(tmp_14_fu_85_p2)
);

compressor_fcmp_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
compressor_fcmp_3dEe_U4(
    .din0(tmp_19_fu_89_p0),
    .din1(thresh_read_reg_253),
    .opcode(5'd2),
    .dout(tmp_19_fu_89_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_V_0_ack_out) & (1'b1 == in_V_0_vld_out))) begin
            in_V_0_sel_rd <= ~in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_V_0_vld_in) & (1'b1 == in_V_0_ack_in))) begin
            in_V_0_sel_wr <= ~in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_V_0_vld_in) & (1'b1 == in_V_0_ack_out) & (in_V_0_state == 2'd3)) | ((1'b0 == in_V_0_vld_in) & (in_V_0_state == 2'd2)))) begin
            in_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_V_0_vld_in) & (1'b0 == in_V_0_ack_out) & (in_V_0_state == 2'd3)) | ((1'b0 == in_V_0_ack_out) & (in_V_0_state == 2'd1)))) begin
            in_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_V_0_vld_in) & (in_V_0_state == 2'd2)) | ((1'b1 == in_V_0_ack_out) & (in_V_0_state == 2'd1)) | ((in_V_0_state == 2'd3) & ~((1'b1 == in_V_0_vld_in) & (1'b0 == in_V_0_ack_out)) & ~((1'b0 == in_V_0_vld_in) & (1'b1 == in_V_0_ack_out))))) begin
            in_V_0_state <= 2'd3;
        end else begin
            in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_ack_out) & (1'b1 == out_V_1_vld_out))) begin
            out_V_1_sel_rd <= ~out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_in))) begin
            out_V_1_sel_wr <= ~out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out) & (2'd3 == out_V_1_state)) | ((1'b0 == out_V_1_vld_in) & (2'd2 == out_V_1_state)))) begin
            out_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out) & (2'd3 == out_V_1_state)) | ((1'b0 == out_V_1_ack_out) & (2'd1 == out_V_1_state)))) begin
            out_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_V_1_vld_in) & (2'd2 == out_V_1_state)) | ((1'b1 == out_V_1_ack_out) & (2'd1 == out_V_1_state)) | ((2'd3 == out_V_1_state) & ~((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out)) & ~((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out))))) begin
            out_V_1_state <= 2'd3;
        end else begin
            out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_0_load_A)) begin
        in_V_0_payload_A <= in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_0_load_B)) begin
        in_V_0_payload_B <= in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1))) begin
        notlhs8_reg_284 <= notlhs8_fu_149_p2;
        notlhs_reg_268 <= notlhs_fu_121_p2;
        notrhs_reg_273 <= notrhs_fu_127_p2;
        tmp_8_neg_reg_279 <= tmp_8_neg_fu_133_p2;
        tmp_reg_261 <= in_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_A)) begin
        out_V_1_payload_A <= tmp_22_fu_240_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_B)) begin
        out_V_1_payload_B <= tmp_22_fu_240_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_15_reg_305) & (1'd0 == sel_tmp2_reg_310)) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == sel_tmp2_reg_310)) | ((1'd1 == tmp_15_reg_305) & (1'd0 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state18)) | ((1'd1 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state18)))) begin
        reg_93 <= grp_fu_77_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == tmp_15_reg_305) & (1'd0 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state13)) | ((1'd1 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_98 <= grp_fu_81_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sel_tmp2_reg_310 <= sel_tmp2_fu_228_p2;
        tmp_15_reg_305 <= tmp_15_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        slope_read_reg_248 <= slope;
        thresh_read_reg_253 <= thresh;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_12_reg_289 <= tmp_12_fu_184_p2;
        tmp_14_reg_295 <= tmp_14_fu_85_p2;
        tmp_19_reg_300 <= tmp_19_fu_89_p2;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_15_reg_305) & (1'd0 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state14)))) begin
        grp_fu_77_opcode = 2'd1;
    end else if ((((1'd1 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == tmp_15_reg_305) & (1'd0 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state14)))) begin
        grp_fu_77_opcode = 2'd0;
    end else begin
        grp_fu_77_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_15_reg_305) & (1'd0 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state14)) | ((1'd1 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state14)))) begin
        grp_fu_77_p0 = reg_98;
    end else if ((((1'd1 == tmp_15_reg_305) & (1'd0 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == sel_tmp2_reg_310) & (1'b1 == ap_CS_fsm_state5)))) begin
        grp_fu_77_p0 = tmp_reg_261;
    end else begin
        grp_fu_77_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1))) begin
        in_V_0_ack_out = 1'b1;
    end else begin
        in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_V_0_sel)) begin
        in_V_0_data_out = in_V_0_payload_B;
    end else begin
        in_V_0_data_out = in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_V_TDATA_blk_n = in_V_0_state[1'd0];
    end else begin
        in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out_V_1_sel)) begin
        out_V_1_data_out = out_V_1_payload_B;
    end else begin
        out_V_1_data_out = out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (out_V_1_ack_in == 1'b1))) begin
        out_V_1_vld_in = 1'b1;
    end else begin
        out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        out_V_TDATA_blk_n = out_V_1_state[1'd1];
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in_V_0_ack_in = in_V_0_state[1'd1];

assign in_V_0_load_A = (in_V_0_state_cmp_full & ~in_V_0_sel_wr);

assign in_V_0_load_B = (in_V_0_sel_wr & in_V_0_state_cmp_full);

assign in_V_0_sel = in_V_0_sel_rd;

assign in_V_0_state_cmp_full = ((in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_0_vld_in = in_V_TVALID;

assign in_V_0_vld_out = in_V_0_state[1'd0];

assign in_V_TREADY = in_V_0_state[1'd1];

assign notlhs6_fu_172_p2 = ((tmp_9_fu_158_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs8_fu_149_p2 = ((tmp_16_fu_139_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_121_p2 = ((tmp_4_fu_107_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs7_fu_178_p2 = ((tmp_10_fu_168_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_127_p2 = ((tmp_1_fu_117_p1 == 23'd0) ? 1'b1 : 1'b0);

assign out_V_1_ack_in = out_V_1_state[1'd1];

assign out_V_1_ack_out = out_V_TREADY;

assign out_V_1_load_A = (out_V_1_state_cmp_full & ~out_V_1_sel_wr);

assign out_V_1_load_B = (out_V_1_sel_wr & out_V_1_state_cmp_full);

assign out_V_1_sel = out_V_1_sel_rd;

assign out_V_1_state_cmp_full = ((out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_1_vld_out = out_V_1_state[1'd0];

assign out_V_TDATA = out_V_1_data_out;

assign out_V_TVALID = out_V_1_state[1'd0];

assign sel_tmp1_fu_222_p2 = (tmp_15_fu_203_p2 ^ 1'd1);

assign sel_tmp2_fu_228_p2 = (tmp_20_fu_217_p2 & sel_tmp1_fu_222_p2);

assign thresh_to_int_fu_155_p1 = thresh_read_reg_253;

assign tmp_10_fu_168_p1 = thresh_to_int_fu_155_p1[22:0];

assign tmp_11_fu_194_p2 = (notrhs_reg_273 | notlhs_reg_268);

assign tmp_12_fu_184_p2 = (notrhs7_fu_178_p2 | notlhs6_fu_172_p2);

assign tmp_13_fu_198_p2 = (tmp_11_fu_194_p2 & tmp_12_reg_289);

assign tmp_15_fu_203_p2 = (tmp_13_fu_198_p2 & tmp_14_reg_295);

assign tmp_16_fu_139_p4 = {{tmp_8_neg_fu_133_p2[30:23]}};

assign tmp_17_fu_208_p2 = (notrhs_reg_273 | notlhs8_reg_284);

assign tmp_18_fu_212_p2 = (tmp_17_fu_208_p2 & tmp_12_reg_289);

assign tmp_19_fu_89_p0 = tmp_8_neg_reg_279;

assign tmp_1_fu_117_p1 = tmp_1_to_int_fu_103_p1[22:0];

assign tmp_1_to_int_fu_103_p1 = in_V_0_data_out;

assign tmp_20_fu_217_p2 = (tmp_18_fu_212_p2 & tmp_19_reg_300);

assign tmp_21_fu_234_p3 = ((tmp_15_reg_305[0:0] === 1'b1) ? reg_93 : tmp_reg_261);

assign tmp_22_fu_240_p3 = ((sel_tmp2_reg_310[0:0] === 1'b1) ? reg_93 : tmp_21_fu_234_p3);

assign tmp_4_fu_107_p4 = {{tmp_1_to_int_fu_103_p1[30:23]}};

assign tmp_8_neg_fu_133_p2 = (tmp_1_to_int_fu_103_p1 ^ 32'd2147483648);

assign tmp_9_fu_158_p4 = {{thresh_to_int_fu_155_p1[30:23]}};

endmodule //compressor
